SECURE INIT / STORAGE / KEYS – Deployment Instructions
======================================================

Purpose
-------
This document explains how application keys, secure configuration, and storage are handled.

⚠️ Do NOT commit secrets (keys, `.env`) to version control.  
`.env_DEFAULT` is provided as a reference only.

Project structure
-----------------
Example layout:

/project-root/
/secure/ <-- outside webroot
config.php
load_env.php
/keys/ <-- binary keys (32B each)
crypto_key_v1.bin
filevault_key_v1.bin
/tools_NO_SHELL/ <-- temporary tools (not for production)
tmp_trigger.php
EDITANDOPENMEINYOURPC.html
generate_keys.php <-- key generator (shell or wrapper)
run_security_audit.php <-- security audit (shell or wrapper)
/storage/ <-- encrypted files, outside webroot
/uploads/
/books/
/www/ <-- webroot (public part)
/domains/
/example.com/
/eshop/

Keys
----
- Keys are generated via `generate_keys.php` (manual or wrapper call).
- Stored in `/secure/keys/` as `name_vX.bin` (32 bytes each).
- Required: `crypto_key_v1.bin`, `filevault_key_v1.bin`.
- Permissions:
  - `/secure/keys/`: `chmod 2750`
  - key files: `chmod 0400` (readable only by webserver user)

Configuration
-------------
- App configuration is in `secure/config.php`.
- Sensitive values (DB, keys, API credentials) are loaded from `.env`.
- `.env_DEFAULT` is a template for reference.

Storage
-------
- `/storage/` is outside webroot, contains encrypted user files (e.g. e-books).
- Permissions: `chmod 750` (owned by webserver user).
- Must not be HTTP accessible.

Audit & testing
---------------
- `run_security_audit.php` performs full checks (keys, Crypto, FileVault, AuditLogger).
- Cannot be called directly from the web; run via shell or through a wrapper.
- Temporary wrapper (`/secure/tools_NO_SHELL/tmp_trigger.php`) allows secure POST
  execution with a one-time token from `.env`.
- `EDITANDOPENMEINYOURPC.html` is a helper form for local browser testing.
- After successful tests, **delete the wrapper and HTML file**.

Security recommendations
------------------------
- Always serve production over HTTPS.
- Use secure session flags: `session.cookie_secure=1`, `session.cookie_httponly=1`.
- Never commit `.env` or keys.
- Periodically rotate keys:
  1. Generate `*_v2.bin`
  2. Update `config.php` to point to the new version
  3. Re-encrypt or migrate existing data as needed
- Keep offline backups of keys (without them, data is unrecoverable).
- Deny access to `/secure/` and `/storage/` at the webserver level.

Quick sanity checks
-------------------
- Run `run_security_audit.php` → output must include `"all_ok": true`.
- DB status: `"DB: OK"`.
- Storage: `"STORAGE: OK"`.
- Crypto & FileVault roundtrips must pass.
- AuditLogger must record a test entry.

Status ✅
---------
- Configuration and keys are outside webroot  
- Keys validated (32B length, correct permissions)  
- Crypto, FileVault, AuditLogger working  
- Security audit passed (`all_ok:true`)  

The project now has a solid security foundation and is production-ready.